Suggested solutions to the exercises;

UsernameValidator:      [a-z]{6,9}

BankGiroValidator:      \d{3,4}-\d{4}

PlusGiroValidator:      \d{6,7}-\d

VatNumberValidator:     SE[ ]?\d{10}01

UUIDValidator:          [\da-f]{8}-(?:[\da-f]{4}-){3}[\da-f]{12}

HtmlLinkParser:         .*<a href="(.*)">(.*)</a>.*

    public Optional<HtmlLink> getLink() {
        Matcher matcher = Pattern.compile(REGEXP).matcher(input);
        if (matcher.matches()) {
            return Optional.of(new HtmlLink(matcher.group(1), matcher.group(2)));
        }
        return Optional.empty();
    }


VersionNumberValidator: (\d+)\.(\d+)(?:\.(\d+))?

    public Version getVersion() {
        if (!validate().isMatch()) {
            return null;
        }
        int major = 1, minor = 2, bugfix = 3;
        matcher.reset();
        if (matcher.find()) {
            return new Version(matcher.group(major), matcher.group(minor), matcher.group(bugfix));
        }
        return null;
    }

PasswordValidator:      [a-zåäöæøœ]{2}[*+\-?@£$€¥!#¤%&]\d{1,3}[A-ZÅÄÖÆØŒ]{1,3}[*+\-?@£$€¥!#¤%&][A-ZÅÄÖÆØŒa-zåäöæøœ]{1,3}\d

PhoneNumberValidator:   ((\+[1-9]\d{0,2}) ([1-9]\d{0,2})|0[1-9]\d{0,2}) ([1-9]\d{4,7})

    private static final int ONLY_REGIONAL = 1, COUNTRY = 2, REGIONAL = 3, NUMBER = 4;

    public Optional<PhoneNumber> getPhoneNumber() {
        if (matcher.matches()) {
            if (hasCountryCode()) {
                return Optional.of(new PhoneNumber(matcher.group(COUNTRY), matcher.group(REGIONAL), matcher.group(NUMBER)));
            } else {
                return Optional.of(new PhoneNumber(matcher.group(ONLY_REGIONAL), matcher.group(NUMBER)));
            }
        }
        return Optional.empty();
    }

    private boolean hasCountryCode() {
        return matcher.group(COUNTRY) != null;
    }


NameValidator:          (([A-ZÅÄÖÉÆ][a-zåäöéæ]+)([- ]([A-ZÅÄÖÉÆ][a-zåäöéæ]+))?), (([A-ZÅÄÖÉÆ][a-zåäöéæ]+)([- ]([A-ZÅÄÖÉÆ][a-zåäöéæ]+)){0,3})([ ](([A-ZÅÄÖÉÆ]\\.)([- ]([A-ZÅÄÖÉÆ]\\.))*))?
    (groups 1, 5 & 10)

    public Optional<Name> getName() {
        int familyName = 1, givenName = 5, initials = 10;
        if (matcher.matches()) {
            return Optional.of(new Name(matcher.group(familyName), matcher.group(givenName), matcher.group(initials)));
        }
        return Optional.empty();
    }
